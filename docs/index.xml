<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TH&#39;s Blog</title>
    <link>https://t0m0ya1997.github.io/</link>
    <description>Recent content on TH&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Wed, 25 Mar 2020 04:52:30 +0600</lastBuildDate><atom:link href="https://t0m0ya1997.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43;配列を.npy形式で保存したい癖の強いあなたへ。</title>
      <link>https://t0m0ya1997.github.io/posts/c&#43;&#43;2npy/</link>
      <pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://t0m0ya1997.github.io/posts/c&#43;&#43;2npy/</guid>
      <description>この記事では，C++で数値シミュレーションを行っている方向けに，Python の numpy で使える.npy形式で C++配列vector を保存する方法を紹介します． 結論だけをお求めの方は最下部に numpy.hpp を掲載しておりますので，そちらをコピペなりしてお手元で使ってみてください．
私はMCMCなどの数値シミュレーションを行う際に，計算時間の観点からPythonではなくC++を使っています． しかしながら，実験結果の可視化を行うにはバイナリコードで結果を書き出して，gnuplotを用いるなど，私的には敷居が高く感じています． 一方で，Pythonのmatplotlibというライブラリを用いると，その学習コストが低い反面，論文にも使えるような，それっぽい図が簡単に描けてしまいます． そこで，C++で作成したvector（多次元も含む）を，Pythonのnumpyで簡単に読み書きができる.npy形式でデータのやり取りができると最高なのです．
今回紹介するのは，C++ の vector を.npy形式で保存するSaveNpy関数と，Python を用いて生成した.npy形式で保存された多次元配列を C++ 内で多次元 vector として読み込むLoadNpy関数です． 実装はこちらの記事を大いに参考にさせていただきました． 注意としては，4次元配列までしか対応していないです． 私の場合，4次元で事足りているのですが，4次元よりも大きな次元の配列の入出力が必要でしたら，コードを参考に書き換えてみてください． また，私はint型を使用することもあるため，上記の記事にint型の入出力を加えたものを紹介します．
 numpy.hpp #pragma once #include &amp;lt;fstream&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;string&amp;gt;#include &amp;lt;cstdio&amp;gt;#include &amp;lt;vector&amp;gt; namespace { template &amp;lt;typename .</description>
    </item>
    
    <item>
      <title>XorShiftという乱数生成法が早いらしい。</title>
      <link>https://t0m0ya1997.github.io/posts/xorshiro/</link>
      <pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://t0m0ya1997.github.io/posts/xorshiro/</guid>
      <description>参考文献 </description>
    </item>
    
    <item>
      <title>メトロポリス法ってなんだし。</title>
      <link>https://t0m0ya1997.github.io/posts/metropolis_hastings/</link>
      <pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://t0m0ya1997.github.io/posts/metropolis_hastings/</guid>
      <description>本記事では，マルコフ連鎖モンテカルロ法（Markov Chain Monte Carlo: MCMC）を実現する手法の１つである，メトロポリス法（Metropolis-Hastings Method）について解説してみます． また，簡単 of 簡単な数値実験を行います．
メトロポリス法(Metropolis-Hastings Method) 数値実験 今回はメトロポリス法による1次元標準正規分布からのサンプリングを行います． 確率変数を $x\in\mathbb R$ とします． 標準正規分布の確率密度関数 $p(x)$ は
$$ p(x|\mu = 0, \sigma^2 = 1) = \frac{1}{\sqrt{2\pi}}\exp\left(-\frac{1}{2}x^2\right), $$
となります． 現時点でのサンプルを $x$ とし，確率的摂動 $\delta\in\mathbb R$ を加えた，遷移先の候補点を $x&#39; = x + \delta$とします． メトロポリス法の更新則として，$x,x&#39;$ を用いて</description>
    </item>
    
    <item>
      <title>こんにちは。黒かりんとうが美味しいと思えるようになりました。</title>
      <link>https://t0m0ya1997.github.io/posts/hello_world/</link>
      <pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://t0m0ya1997.github.io/posts/hello_world/</guid>
      <description>はじめまして． 社会人になる，なってしまう，ことから，ブログを移転しました． 社会人になると，様々なしがらみが増えるものです． ということで，今後は 「TH」 と名乗ることといたしました．
さてさて，僕は3月に大学院を修了し，4月にはどこかの広告代理店でデータサイエンティストになる予定の人です． いったい現時点で私が何で社会に貢献するのか，甚だ疑問が残るところではありますが，働きます． 働くのが嫌で大学院生という人生のモラトリアムを謳歌していたのですが，それも終わりです． しかしながら，社会人とて学生のような遊び心は持っていたいものです． そういうわけでこのブログです． 僕は写真を撮ることが好きです． 本を読むことが好きです． 最近では苦くて味の違いもわからなかったコーヒーも，味の違いがわかるようになり，好きになりました． 文句を垂れながらやってきた勉強も，楽しくなりました． 「社会人になっても，学生のように趣味を愉しむ，勉学に励む，学びを共有する．」そんなコンセプトでこのblog-ishなものを作ってみました． 僕の人生の一部を誰かと共有した気になる，そんな些か自己中心的な目的のためでもありますが，ふとした時にふらっと立ち寄っていただけると幸いです．
伝えたいことは伝えたので，ここで終わっても良いのでしょうが，最近あった出来事をお話しさせてください． 僕はカフェが好きです． というのも，僕は昨年からカフェでアルバイトを始めました． カフェの業務内容を知るようになり，つい他のカフェに立ち寄ると，カウンター越しにスタッフの方々を観察するのが癖になりました． 先日，行きつけのカフェに行きました． 喫煙席が備えてあり，時代に逆らえず電子煙草を吸う僕にはオアシスのような場所です． 隣の席に老婆が座っていました． 小豆色の巾着を持った彼女は，巾着の中を探り，何かを探していました． それも周囲をキョロキョロと見渡し，警戒するように． 横目でそれを見ていた僕は怖くなりました． 歳を重ねていくうちに纏わりつくしがらみもまた，ある時期を境に，糸を解くように，アイスクリームが溶けるように，なくなります． きっともう，何にも縛られないであろうその老婆の巾着からは，何が出てきてもおかしくはありません． 一丁の拳銃かもしれないし，大麻かもしれない． 念入りに研がれた包丁かもしれないし，毒薬かもしれない． 非日常的な出来事を妄想をしがちな僕はあらゆる考えを巡らせ，独りで恐怖を感じていたのです． そんな緊張も知らずに，老婆が音を立てずに取り出したのは，黒かりんとう． ドンキ・ホーテの黄色いビニール袋から出てきた黒かりんとう． くしゃくしゃと音を奏でるビニール袋に入れられた黒かりんとう． 周囲に気づかれないようにと，こっそり老婆の口に運ばれていく黒かりんとう． 噛み砕かれて思いのほか，音を出してしまう黒かりんとう． 僕はその日の帰り道，きっと老婆も行ったであろうドンキ・ホーテで黒かりんとうを買って帰りました． 黒かりんとうが美味しいと思えるようになりました．</description>
    </item>
    
    <item>
      <title>ベイズから眺めるMAP推定は豊洲の高層ビルから眺める東京湾よりも美しいのか。</title>
      <link>https://t0m0ya1997.github.io/posts/bayes_map/</link>
      <pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://t0m0ya1997.github.io/posts/bayes_map/</guid>
      <description>本記事では，ベイズの枠組みでLASSO回帰やRidge回帰に代表される，正則化付き最小二乗法を眺めてみます． 正則化は機械学習を学ぶと早い段階で出てくる，過学習を抑制するためのテクニックですよね． この正則化も実はベイズの枠組みで見ると，MAP（事後確率最大化：Maximum a posteriori）推定に相当します． 「当たり前じゃん」と思った方には不毛な記事になりますが，是非最後まで読んでいただけると幸いです．
1. ベイズ推論（Bayesian Inference） ベイズ推論については渡辺先生のこちらが詳しいです． 与えられたデータ $x^n=(x_1,\cdots,x_n),~ x_i\in\mathbb R^N$ は真の確率分布$q(x)$にi.i.dに従う確率変数 $X_i\in\mathbb R^N,~i=1,\cdots,n$ の実現値と考えます． つまり，データの同時分布は $$ q(x^n)=\prod_{i=1}^nq(x_i) =q(x_1)q(x_2)\cdots q(x_n), $$ となります． ここで，真の分布 $q(x)$ は知ることのできないものとして考えます． ベイズ推論とは，真の分布 $q(x)$ を与えられたデータ $x^n$ から推測することを指します．
それでは，具合的にどうやって推測を行うのでしょうか？ ここで，人間はパラメータ $w\in W\subset \mathbb R^d$ によって形状が決定する， $x\in\mathbb R^N$ 上の条件付き確率分布 $p(x|w)$ (確率モデル) と $w\in W$ 上の確率分布 $\varphi(w)$ (事前分布) を用意します． 渡辺先生の本では，逆温度 $\beta$ での事後確率が登場しますが，本記事では，データ $x^n$ が与えられたときの，パラメータ $w$ の事後確率 $p(w|X^n)$ を一般的なベイズ統計の教科書に合わせて以下で定義します．</description>
    </item>
    
    <item>
      <title>About Author</title>
      <link>https://t0m0ya1997.github.io/author/</link>
      <pubDate>Mon, 06 Apr 2020 02:07:31 +0600</pubDate>
      
      <guid>https://t0m0ya1997.github.io/author/</guid>
      <description>I am Bay, data scientist in Japan, and interested in Bayesian Inference, Signal Processing, Mathematical Optimization, Machine Learnings, and so on. I want to write something I think about Programming, Books, Cameras, and Research-ish something in everyday life. I do not represent my organization in my remarks.</description>
    </item>
    
    <item>
      <title>Admin Panel</title>
      <link>https://t0m0ya1997.github.io/admin/</link>
      <pubDate>Mon, 06 Apr 2020 02:07:30 +0600</pubDate>
      
      <guid>https://t0m0ya1997.github.io/admin/</guid>
      <description></description>
    </item>
    
    <item>
      <title>All Sections</title>
      <link>https://t0m0ya1997.github.io/sections/</link>
      <pubDate>Mon, 06 Apr 2020 02:07:30 +0600</pubDate>
      
      <guid>https://t0m0ya1997.github.io/sections/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
